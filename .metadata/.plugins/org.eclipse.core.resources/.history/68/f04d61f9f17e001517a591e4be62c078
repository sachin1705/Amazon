//============================================================================
// Name        : Amazon21.cpp
// Author      : Sachin
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <bits/stdc++.h>
#define R 3
#define C 3
using namespace std;
void printMaximumFrequencyValue(int arr[],int n);
void RemoveDuplicatePrimes(int* arr, int& len);
void printDigit(int arr[],int n,int index,string);
void rotateBy90Degree(int arr[][C]);
void printParanthesis(int pos,int n,int n1,int n2,int open,int close,int open1,int close1,int open2,int close2);
void show_mem_rep(char *start, int n);
void printContinuousSubArrayWithAtMax3UniueElement(int arr[],int n);

int main() {
		int ARR[]={1 ,2 ,3 ,1 ,4 ,3 ,4 ,1 ,2};
	cout<<"\n================\n";
	int n=sizeof(ARR)/sizeof(ARR[0]);
	printContinuousSubArrayWithAtMax3UniueElement(ARR,n);
	return 0;
}

void printContinuousSubArrayWithAtMax3UniueElement(int arr[],int n){

	std::map<int,int> m=new map<int,int>;
	int start=0,maxcount=0,maxval=INT_MIN;
	for(int i=0;i<n;i++){
		cout<<"map size "<< m.size()<<"\n";
		if(m[arr[i]]){
			m[arr[i]]++;
			maxcount++;
		}
		else{
			if(m.size() < 3){
				m[arr[i]]++;
				maxcount++;
			}
			else{
				for(int j=start;j<i;j++){
					arr[m[j]]--;
					maxcount--;
					if(arr[m[j]]==0){
						m.erase(arr[j]);
						start=j+1;
						if(maxval < maxcount)
							maxval=maxcount;
						break;
					}
				}
				m[arr[i]]++;
			}

		}
	}
	if(maxval < maxcount)
		maxval=maxcount;
	int j=0;
	for(int i=start;j<maxval;j++,i++){
		cout<<arr[i]<<" ";
	}
	m.clear();
}


void show_mem_rep(char *start, int n)
{
	int i;
	int val=0,k=0;;
	for (i = 0; i < n; i++)
	{
		printf(" %.2x", start[i]);
		val = val | (start[i] & 0xff<<k);
		printf(" %.2x",start[i] & 0xFF<<k);

		k=k+8;
	}
	printf("\n");
	cout<<val;
}

void printParanthesis(int pos,int n,int n1,int n2,int open,int close,int open1,int close1,int open2,int close2){
	static char str[100];
	if(close+close1+close2==n+n1+n2){
		cout<<str<<"\n";
		return;
	}
	else{
		if(close < open){
			str[pos]=')';
			printParanthesis(pos+1,n,n1,n2,open,close+1,open1,close1,open2,close2);
		}
		if(n > open){
			str[pos]='(';
			printParanthesis(pos+1,n,n1,n2,open+1,close,open1,close1,open2,close2);
		}

		if(close1 < open1){
			str[pos]=']';
			printParanthesis(pos+1,n,n1,n2,open,close,open1,close1+1,open2,close2);
		}
		if(n1 > open1){
			str[pos]='[';
			printParanthesis(pos+1,n,n1,n2,open,close,open1+1,close1,open2,close2);
		}

		if(close2 < open2){
			str[pos]='}';
			printParanthesis(pos+1,n,n1,n2,open,close,open1,close1,open2,close2+1);
		}
		if(n2 > open2){
			str[pos]='{';
			printParanthesis(pos+1,n,n1,n2,open,close,open1,close1,open2+1,close2);
		}

	}
}
void rotateBy90Degree(int arr[][C]){
	int **temp=new int*[R];
	for(int i=0;i<R;i++)
		temp[i]=new int[C];
	for(int i=0;i<R;i++){
		for(int j=0;j<C;j++)
			temp[j][C-i-1]=arr[i][j];
	}
	for(int i=0;i<R;i++){
		for(int j=0;j<C;j++)
			cout<<temp[i][j]<<" ";
		cout<<"\n";
	}
}

/*
 * T9 dictionary
 */
void printDigit(int arr[],int n,int index,string s){
	if(index==n){
		cout<<s<<"\n";
		return;
	}
	switch(arr[index]){
	case 1:
		index++;
		break;
	case 2:
		printDigit(arr,n,index+1,s+"a");
		printDigit(arr,n,index+1,s+"b");
		printDigit(arr,n,index+1,s+"c");
		break;
	case 3:
		printDigit(arr,n,index+1,s+"d");
		printDigit(arr,n,index+1,s+"e");
		printDigit(arr,n,index+1,s+"f");
		break;
	case 4:
		printDigit(arr,n,index+1,s+"g");
		printDigit(arr,n,index+1,s+"h");
		printDigit(arr,n,index+1,s+"i");
		break;


	}
}


/*
 * Find maximum frequent numbers in an array. If there are more numbers with maximum frequency,
 * they display all numbers in ascending order. Ascending order is important.
 */


void printMaximumFrequencyValue(int arr[],int n){
	map<int,int> m;
	int maxfrequency=INT_MIN;
	for(int i=0;i<n;i++){
		m[arr[i]]++;
		maxfrequency=max(m[arr[i]],maxfrequency);
	}
	for(map<int,int>::iterator it=m.begin();it!=m.end();it++){
		if(it->second==maxfrequency){
			cout<<it->first<<" ";
		}
	}
}


void RemoveDuplicatePrimes(int* arr, int& len)
{
	int *pArr(arr);
	long long product(1);
	int uniqueLen(-1);;

	while(pArr < arr + len){
		if(product % *pArr != 0){
			uniqueLen ++;
			arr[uniqueLen] = *pArr;
			product *= *pArr;
		}

		pArr ++;
	}

	len = uniqueLen + 1;
}
